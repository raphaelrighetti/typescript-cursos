TypeScript é um superset do JavaScript, tendo tudo que o JavaScript tem, só que com features a mais e uma sintaxe tipada.

O nosso código TS precisa ser transpilado para um código JS convencional para o navegador entender, e para isso os nossos códigos são transpilados sempre para a pasta dist, que será a pasta do deploy, por assim dizer.

Além disso, o que realmente mais atrai no TypeScript é saber que o nosso código está com problema antes mesmo de rodá-lo, pois como há uma "compilação" a ser feita, o compilador do TypeScript irá nos avisar dos problemas enquanto ainda estamos codando.

============MÓDULOS============

Podemos, com o JS, adicionar um script do tipo "module" no nosso arquivo HTML, assim fazendo com que todos os outros módulos utilizados por esse script funcionem, o que é uma coisa muito boa e faz a gente não precisar ficar importando um monte de scripts no arquivo HTML.

Podemos pensar nesse módulo inicial como uma classe "main" do Java, que é onde a aplicação sempre vai iniciar.

Para inseri-lo no nosso arquivo HTML, basta incluí-lo em uma tag <script></script> com o type="module".

============MODELO============

Um modelo é uma representação de algo real no nosso código, por exemplo uma negociação.

============COMPILADOR============

Assim que trocamos a extensão de um arquivo .js para .ts, temos um linting muito mais específico nos erros, mostrando várias coisas que podem causar problemas enquanto estamos codando.

Os nossos arquivo .ts não podem ficar na pasta "dist", pois a pasta dist é o nosso código final, compilado para js a partir dos arquivos ts, e se tivermos arquivos ts lá, o navegador não conseguirá lê-los. Devemos colocar os arquivos .ts na pasta "app".

Instalamos o compilador por meio do npm, mas só instalá-lo não basta, temos que ter um arquivo "tsconfig.json" que irá dizer ao compilador como ele deve se comportar.

Podemos usar a opção: 

"compilerOptions": {
    "outDir': <diretório de saída dos arquivos compilados>,
    "target": <versão do js>,
    "noEmitOnError": true
},
"include": [<caminhos de pastas com os arquivos .js>]

Desta forma estamos falando para o compilador do TypeScript que ele deve compilar os arquivos para certa pasta, usando tal versão do JavaScript e onde estão os arquivos .ts que ele deve compilar. Também dizemos que ele não deve compilar os arquivos se estiverem com erro de  compilação.

Essa é a configuração mínima que precisamos fazer no nosso compilador do TypeScript para ele funcionar.

============COMPILANDO============

Para compilarmos o nosso código, podemos criar um script no arquivo package.json, que ficaria assim:

"compile": "tsc"

Assim toda vez que rodarmos o script "compile", iremos rodar o comando tsc para compilar os nossos arquivos.

Também podemos rodar o compilador de modo que a cada mudança nos arquivos .ts ele compile automaticamente. Para isso, basta criamos um script:

"watch": "tsc -w"

Dessa forma os arquivos serão gerados automaticamente na pasta de saída, mas não teremos o servidor rodando para escutar a essas alterações. Para fazer isso precisamos usar o módulo "concurrently", fazendo um script que roda outros scripts ao mesmo tempo. Por exemplo:

"start": "concurrently \"npm run watch\" \"npm run server\""

O compilador respeita a árvore de pastas que temos no diretório onde estão os nossos arquivos .ts, criando a mesma árvore na pasta de saída, mesmo que não tenhamos criado nem a pasta de saída em si.

============SINTAXE TIPADA============

Podemos usar o modificador de visibilidade "private" em atributos de classes no TypeScript, assim não permitindo acesso à eles. Também podemos usar o "public".

Para getters, utilizamos os métodos get padrão que temos no JS também.

Para especificarmos o tipo em instâncias, basta utilizarmos a sintaxe:

<instância>: <tipo>

Sim, o tipo vem na frente da declaração.

O TypeScript possui vários tipos nativos dele que representam uma série de coisas, inclusive vários tipos de elementos HTML, como o "HTMLInputElement", por exemplo.

Importante lembrar que em vários casos o TS adiciona o tipo certo à instância sem especificarmos ele, com base no tipo que estamos atribuindo a ela.

Por padrão, quando não especificamos nenhum tipo em alguma instância no nosso código, o TypeScript atribui o tipo "any", o que significa que aquela instância poderá qualquer tipo, o que não é o ideal.

Para tirarmos esse comportamento, podemos adicionar a seguinte configuração no nosso "tsconfig.json":

"noImplicitAny": true

É uma boa prática sempre especificar o tipo em atributos de classes, parâmetros recebidos em métodos e retornos de métodos e funções, só deixando o TS atribuir automaticamente quando estamos criando variáveis dentro de métodos.

============CONTROLLER============

Um controller no TS nada mais é do que uma classe ou módulo que vai ser responsável por tratar a interação do usuário na página e fazer a o que deve se feito a partir desta interação.

Normalmente vamos ter esses controllers atrelados a elementos do nosso dom, como um botão, por exemplo, assim chamando o controller quando algum evento ocorrer neste elemento.

============GENERICS============

No TypeScript temos Generics, assim como no Java, e a sintaxe é bem parecida. Exemplo:

"private lista: Array<string> = [];"

Desta forma dizemos que a nossa variável "lista" é um Array de strings, assim não permitindo adicionarmos nenhum outro tipo como item do Array. Inclusive, quando fazemos um for nos itens do Array, temos todo o auto-complete com os métodos e propriedades de String.

Se temos um Array<any> encapsulado em uma classe que não queremos que seja modificável fora dos métodos da classe, podemos retornar uma cópia do Array<any> em vez dele em si no nosso método get. Para fazer isto, basta usar o spread:

"return [...<nosso Array<any>>];"

Essa é uma forma de resolver este problema relativamente antiga e do próprio JS, o TypeScript possui uma forma bem mais eficiente de fazer isso que é usar o modificador "readonly". Para isso, basta modificar o retorno do nosso método para "ReadonlyArray<<tipo>>". Exemplo:

listar(): ReadonlyArray<any> {
    return <nossa lista privada>;
}

Desta forma o compilador do TS não nos deixará executar nenhum método que modifique a lista, gerando um erro de compilação quando tentamos fazer algo do tipo.

============PARTICULARIDADES============

No TypeScript podemos declarar os atributos da nossa classe nos próprios argumentos do construtor, ou seja, não precisamos nem ter um corpo no construtor e nem tê-los na classe em si. Para isso basta utilizar a sintaxe:

constructor(
    private _meuAtributo: any
) {}

Desta forma teremos um atributo privade chamado _meuAtributo na nossa classe. Funciona com "public" também.

Quando estamos criando algum atributo, parâmetro ou variável que é um Array, não precisamos necessariamente utilizar a sintaxe com Generics, podemos utilizar da seguinte forma:

"private _pessoas: Pessoa[] = [];"

Isso dá no mesmo.

Podemos utilizar essa sintaxe para ReadonlyArray também, basta usar o modificador "readonly":

get pessoas(): readonly Pessoa[] {
    return this._pessoas;
}

Também podemos usar o modificador "readonly" para atributos públicos da nossa classe, assim fazendo com que não precisemos dos getters, mas ainda assim impossibilitando a atribuição de valores fora da classe.

Importante lembrar que, nesse caso, ainda conseguimos acessar todos os métodos do atributos, inclusive os que o modificam. Então o uso do readonly nesses casos pode não ser omais recomendável.

Importante lembrarmos que mesmo recebendo os atributos em métodos getters, ainda podemos utilizar os métodos que modificam esses atributos, então ainda continuamos com o mesmo problema.

O ideal para fazermos nesses casos é retornar uma nova instância idêntica à nossa propriedade, assim fazendo com que as modificações feitas não alterem o atributo real da classe.

============VIEW============

Views são as nossas classes ou módulos responsáveis por gerar a view do usuário, que no caso do front-end é algum componente da página ou uma página em si.

Podemos usar um template HTML na nossa classe view para inserir os dados dinamicamente nela, assim fazendo algo parecido com o JSX do React.

Lembrando que, como estamos usando o TS puro, para fazer essas coisas podemos usar os métodos do document que estão disponíveis para nós.

============Intl============

*Internationalization*

É um tipo com alguns métodos estáticos que nos permitem fazer coisas com funcionalidades do navegador, como formatar uma data com base na localidade do usuário, por exemplo.

============HERANÇA============

Herança no TypeScript funciona de forma bem similar à herança no Java, podendo, inclusive, usarmos o modificador preotected para que as filhas tenham acesso ao atributo da mãe.

Podemos usar Generics em classes criadas por nós mesmos, assim podendo deixar dinâmico o tipo do parâmetro recebido por algum método e etc.

Para isso, basta na declaração da classe usar a sintaxe:

"export class Algo<T> {}"

Com isso, basta colocar "T" como tipo das coisas que precisam usar esse Generics.

Podemos ter classes abstratas assim como no Java, podendo definir métodos abstratos e não abstratos nelas.

============VISIBILIDADE============

Quando omitimos o modificador de visibilidade, o TypeScript coloca public como padrão.

Podemos mudar a visibilidade de um método abstrato herdado da classe mãe na classe filha para deixá-lo mais visível, mas não o contrário. Se precisarmos proteger este método, devemos deixá-lo como protected na classe filha também.

Podemos ter métodos privados em classes normalmente.

============ENUM============

Enums no TypeScript são quase a mesma coisa que no Java.

Para declará-los, usamos a palavra chave "enum" em vez de "class" e definimos as constantes apenas declarando os nomes delas, com o TypeScript incrementando os valores inteiros delas automaticamente, sempre começando no 0.

É recomendável nós mesmos definirmos os valores dos enums, assim garantindo que eles vão estar certos, independente da ordem. Para fazer isso, basta atribuirmos valores com o sinal "=" na definição das constantes.

Enums não precisam ser apenas inteiros, podem ser qualquer valor que colocarmos para as constantes.

============PARÂMETROS OPCIONAIS============

Podemos receber parâmetrros opcionais em métodos/funções no TypeScript.

Para fazer isso, basta utilizar a sintaxe:

"public static criaPessoa(nome: string, idade?: number): Pessoa {}"

Essa "?" no final da declaração do parâmetro "idade" é o que faz com que esse parâmetro seja opcional, assim dando a possibilidade de ele ser undefined no nosso código, por isso temos que fazer uma verificação para saber se ele está chegando ou não. 

Esses parâmetros opcionais não podem ser o primeiro parâmetro da função e não podem ser seguido por parâmetros não opcionais.

============REMOVENDO COMENTÁRIOS============

Devemos remover qualquer comentário no nosso código compilado para JS, pois não faz sentido tê-los lá.

Podemos deixar os comentários nos arquivos .ts normalmente, apenas modificando o tsconfig.json para não compilá-los para o arquivo .js.

Para isso, basta adicionarmos a configuração:

"removeComments": true

============const algo: Tipo1 | Tipo2============

Podemos definir que uma variável vai ser ou de um tipo ou de outro no TypeScript.

Isso não funciona apenas com dois tipos, podemos definir que uma variável pode ser de diversos tipos sem problema algum.

O nome disso é Union Types.

Isso é o que a API do "querySelector();" faz, dizendo que o elemento pode ser HTMLElement | null.

Isso pode ser um problema, pois se tentarmos fazer alguma ação que faríamos com um HTMLElement com uma variável do tipo null, isso causará um erro.

Isso acontece porque o compilador do TS vem com a configuração:

"strictNullChecks": false

o que faz com que o compilador não nos avise que a referência pode ser null em tempo de compilação.

Se mudamos essa configuração para true,o nosso código irá começar a apresentar diversos erros, o que é o esperado.

Quando estamos com essa configuração, temos que especificar que as variáveis que podem ser null podem receber esse tipo também.

Nesse caso teríamos que fazer uma série de verificações para ver se a variável é null ou não, o que não é o ideal.

Uma solução melhor é assumir que as variáveis que podem ser null não vão ser null, assumindo que o retorno delas é do tipo que deveria ser. Para isso deixamos de definir que a variável também pode ser do tipo null e usamos o casting, por exemplo:

this.inputData = document.querySelector("#data") as HTMLInputElement;

ou

this.inputData = <HTMLInputElement> document.querySelector("#data");

Assim garantimos para o compilador que temos certeza de que essa variável vai ser do tipo "HTMLInputElement".

Podemos utilizar o casting em outros casos também, como para converter um "Element" para um "HTMLElement".

============REQUISITOS NÃO FUNCIONAIS============

São todos os requisitos que, por mais que não tenham sido especificados, são necessários na nossa aplicação.

============performance============

É um objeto disponível globalmente em todos os navegadores que tem uma série de métodos para calcularmos a performance.

Podemos utilizar o método "now();" para pegarmos os milissegundos de agora.

============DECORATOR============

Decorators no TypeScript são tipo annotations no Java e também são utilizadas com um "@" antes do nome e acima de métodos.

É uma função que retorna outra função que iremos implementar mais coisas, para assim utilizá-la como o método que estamos passando para o decorator.

Eles servem para pegarmos um método nosso, decorá-lo na função decorator e sobrescrevê-lo adicionando coisas nele.

Na nossa função decorator precisamos retornar outra função que recebe três parâmetros:

1. target: any

    É o target do nosso decorator que diz no que vamos adicioná-lo. Se for um método estático pode ser um construtor, se for um método padrão de uma classe é o prototype da classe.

2. propertyKey: string

    É o nome do método em que inserimos o decorator.

3. descriptor: PropertyDescriptor

    É o parâmetro que tem a referência par o método original sem o decorator, ou seja, é o parâmetro que sabe tudo o que aquele método faz.

Se retornarmos o descriptor, nosso método que está anotado com o decorator irá continuar a mesma coisa, sem problema algum, mas para fazermos algo com o nosso decorator precisamos modificar esse descriptor, pois isso é o que fará com que a gente consiga modificar os nossos métodos com o decorator.

Podemos pegar o método original com o parâmetro "value" do nosso descriptor, assim podendo atribuir o método original à uma variável.

A ideia é sobrescrever o descriptor.value com uma função que irá fazer todas as ações que queremos fazer no nosso decorator, mas ainda executar o método original dentro dele.

Como no método original podemos ter diversas implementações, onde nem sabemos exatamente qual vai ser o tipo do parâmetro recebido pelo método em alguns casos,  quando estamos mudando o "descriptor.value", não temos como saber qual parâmetro devemos passar na nova função que estamos atribuindo à ele, muito menos o tipo do parâmetro.

Além disso, como atribuimos o método original à uma variável, ele perdeu o contexto do "this", que nesse caso seria a instância da classe que contém o método que está sendo decorado, o que atrapalha ainda mais quando vamos passar o parâmetro para o método que estamos sobrescrevendo do descriptor.

Para combater essas duas coisas, devemos receber no método que estamos sobrescrevendo um array com os valores do objeto args, que podemos receber da seguinte forma:

descriptor.value = function(...args: any[]) {}

Dessa forma temos os argumentos passados ao método da nossa classe nessa funcção também, ainda de forma genérica e podendo ser quantos argumentos forem e de qualquer tipo.

Ainda não temos o contexto do this para passarmos ao método original, mas para isso basta passarmos o this no método apply do método original, seguido do array "args" que recebemos como parâmetro na nossa nova função que está sobrecrevendo o "descriptor.value".

Agora basta sobrescrevermos o "descriptor.value" com a nossa nova função que executará a ação que queremos ao chamar o método da nossa classe, também chamando o método original. 

A função decorator irá ficar mais ou menos assim:

export function logarTempoDeExecucao() {
    return function (
        target: any,
        propertyKey: string,
        descriptor: PropertyDescriptor
    ) {
        const metodoOriginal: Function = descriptor.value;
        descriptor.value = function (...args: any[]) {
            const tempo1 = performance.now();
            metodoOriginal.apply(this, args);
            const tempo2 = performance.now();
            console.log(
                `Tempo de execução do método "${propertyKey}" (em segundos): ${
                    (tempo2 - tempo1) / 1000
                }`
            );
        };

        return descriptor;
    };
}
